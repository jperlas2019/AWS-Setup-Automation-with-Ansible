---
- name: VPC info
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX + '_SOMETHING' }}"
  register: vpcs

- name: get subnet info
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX + '_SUBNET' }}"
      vpc-id: "{{ vpcs.vpcs[0].id }}"
  register: aws_subnets

- name: get security group info app
  amazon.aws.ec2_group_info:
    filters:
      group-name: "{{ AWS_PREFIX + '_SECGRP' }}"
      vpc-id: "{{ vpcs.vpcs[0].id }}"
  register: aws_groups_app

- name: get security group info db
  amazon.aws.ec2_group_info:
    filters:
      group-name: "{{ AWS_PREFIX + '_SECGRP_DB' }}"
      vpc-id: "{{ vpcs.vpcs[0].id }}"
  register: aws_groups_db

- name: EC2 instance
  amazon.aws.ec2_instance:
    name: "{{ AWS_PREFIX + '_' + item.name }}"
    vpc_subnet_id: "{{ aws_subnets.subnets[0].id }}"
    instance_type: t2.micro
    security_group: "{{ item.group.security_groups[0].group_id }}"
    key_name: aws_private_key
    image_id: ami-08675cddb6910220a
    state: running
    wait: yes
    tags:
      Course: "{{ AWS_PREFIX }}"
      Role: "{{ item.name }}"
    network:
      assign_public_ip: true
  register: ec2_instance_data
  loop: 
    - { group: "{{aws_groups_db}}", name: DB }
    - { group: "{{aws_groups_app}}", name: APP }
  when: (item.name != "DB" ) or ((item.name == "DB") and (not rds_database))

- name: Wait for EC2 Instances to Initialize
  pause:
    seconds: 60

- meta: refresh_inventory
